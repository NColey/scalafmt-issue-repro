# https://scalameta.org/scalafmt/docs/configuration.html

version = 3.7.17
runner.dialect = scala213
align.preset = more
align {
  // default value
  openParenCallSite = false
  // default value
  openParenDefnSite = false
  // these are primarily default tokens from:
  //   https://github.com/scalameta/scalafmt/blob/v2.0.0/scalafmt-core/shared/src/main/scala/org/scalafmt/config/AlignToken.scala#L32
  // a few of these produce some false positive alignments -- on balance they are judged to have higher value than their (small) FP cost
  tokens = [
    // default value
    {code = "=>", owner = "Case|Term.Function"}
    // default value
    {code = "%", owner = "Term.ApplyInfix"}
    // default value
    {code = "%%", owner = "Term.ApplyInfix"}
    // default value
    {code = "%%%", owner = "Term.ApplyInfix"}
    // default value
    {code = "->", owner = "Term.ApplyInfix"}
    // default value
    {code = "//", owner = ".*"}
    // non-default: intended to align types in argument lists and nearby definitions
    {code = ":", owner = "Term.Param|Defn.(Def|Val)"}
    // default value
    {code = "<-", owner = "Enumerator.Generator"}
    // non-default: intended to align callsite named arguments and nearby assignment statements
    {code = "=", owner = ".*"}
    // default value
    {code = "extends", owner = "Defn.(Class|Trait|Object)"}
    // default value
    {code = "{", owner = "Template"}
    // default value
    {code = "}", owner = "Template"}
    // default value
    {code = "←", owner = "Enumerator.Generator"}
    // default value
    {code = "→", owner = "Term.ApplyInfix"}
    // default value
    {code = "⇒", owner = "Case"}
    // non-default: intended to align argument lists of nearby pattern match arg lists
    {code = ",", owner = "Pat.*"}
  ]
}
// non-default: follow the standard library format
assumeStandardLibraryStripMargin = true
binPack {
  // non-default: cause literals like List(foo, bar, baz) to render with newlines between arguments
  literalArgumentLists = false
}
continuationIndent {
  // default value
  callSite = 2
  // non-default: use 2 spaces instead of 4 to match pre-existing scalariform style better
  defnSite = 2
  // non-default: use 2 spaces instead of 4 to match pre-existing scalariform style better
  extendSite = 2
}
// default value
danglingParentheses.preset = true
// non-default: default excludes class and trait which doesn't match existing style well
danglingParentheses.exclude = []
// non-default: use Asterisk instead of ScalaDoc to match pre-existing intellij style better
docstrings.style = Asterisk
// non-default: do not include {...} in chains to match pre-existing scalariform style better
//includeCurlyBraceInSelectChains = false
rewrite {
  redundantBraces {
    // non-default: don't allow redundant brances within strings like $"foo.${bar}.baz" -> s"$foo.$bar.baz"
    stringInterpolation = true
    // default value
    methodBodies = true
    // default value
    includeUnitMethods = true
    // default value
    maxLines = 100
    // default value: disabled only due to scalafmt bug: https://github.com/scalameta/scalafmt/issues/1147
    generalExpressions = false
  }
  rules = [
    // non-default: rewrite all infix calls as postfix calls: var1 verb var2 -> var1.verb(var2)
    AvoidInfix
    // non-default: rewrite all fors with parens to fors with braces: for(a <- as; b ...) -> for { \n a <- as \n b... \n }
    PreferCurlyFors
    // non-default: drop parens from for comprehensions that don't require them: for { a <- x (if foo) } -> for { a <- x if foo }
    RedundantParens
    // non-default: always re-sort imports by: symbols, lower-case, upper-case - gives stable import section
    SortImports
    // non-default: always re-sort token modifiers by order below - gives stable class/def/trait modifier section
    SortModifiers
  ]
  sortModifiers {
    // 2.0 default value -- reproduced here for clarity and to protect against future version changes
    order = [
      "`implicit`"
      "`final`"
      "`sealed`"
      "`abstract`"
      "`override`"
      "`private`"
      "`protected`"
      "`lazy`"
    ]
  }
}
// default value
verticalAlignMultilineOperators = false
verticalMultiline {
  // non-default: always put the first arg of a multiline arg list on a new line to better match scalariform style (and it's just better)
  newlineAfterOpenParen = true
  // non-default: create vertical arg lists for `def` tokens
  atDefnSite = true
  // non-default: default is 100, effectively disabling the feature since you can't have 100 arguments :)
  arityThreshold = 2
}
newlines {
  source = keep
  beforeCurlyLambdaParams = multilineWithCaseOnly
}